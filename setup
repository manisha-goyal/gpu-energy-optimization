# ------------------- Build Docker Image -------------------
# Build the Docker image using the specified platform (linux/amd64)
docker build --platform linux/amd64 -t ubuntu-gcc-cuda .

# ------------------- Run Docker Container -------------------
# Run the container interactively
docker run -it ubuntu-gcc-cuda

# ------------------- Open Docker Container -------------------
# On Mac: Press Cmd+Shift+P
# Select "Remote-Containers: Reopen in Container"
# Navigate to the default working directory /root

# ------------------- Setup Steps -------------------
# Navigate to the Accel-Sim framework directory
cd accel-sim-framework

# Install NVBit, a dynamic instrumentation framework for GPU binaries
./util/tracer_nvbit/install_nvbit.sh  

# Build the tracer using NVBit
make -C ./util/tracer_nvbit/  

# Install Python dependencies for Accel-Sim
pip3 install -r requirements.txt

# Source the GPU simulator environment setup script
source ./gpu-simulator/setup_environment.sh

# Add kernel information for GPU simulation in accel-sim-framework/gpu-simulator/trace-driven/trace_drive.cc (custom logic may go here)
: kernel_info_t(gridDim, blockDim, m_function_info,
                  std::map<std::string, const cudaArray *>(),
                  std::map<std::string, const textureInfo *>() 
    ) {

# Print GPU simulation statistics after kernel execution in accel-sim-framework/gpu-simulator/main.cc
m_gpgpu_sim->print_stats(finished_kernel_uid);      

# Build the GPU simulator
make -j -C ./gpu-simulator/

# Check if the simulation binary (accel-sim.out) was created
ls ./gpu-simulator/bin/release


# ------------------- GPU Application Collection -------------------
# Clone the GPU application collection repository
git clone https://github.com/accel-sim/gpu-app-collection

# Source the setup environment for the GPU application collection
source ./gpu-app-collection/src/setup_environment

# Build a specific benchmark (Rodinia 2.0) for functional tests
make -j -C ./gpu-app-collection/src rodinia_2.0-ft

# Build the data required for benchmarks
make -C ./gpu-app-collection/src data


# ------------------- Run Simulations -------------------
# Run simulations for the "rodinia_2.0-ft" benchmark on the "QV100-PTX" GPU configuration.
# The results will be stored under the simulation name "myTest-PTX".
./util/job_launching/run_simulations.py -B rodinia_2.0-ft -C QV100-PTX -N myTest-PTX

# Monitor the progress of the simulation with verbose output.
# This command provides detailed logs of the running simulation.
./util/job_launching/monitor_func_test.py -v -N myTest-PTX

# Collect the simulation statistics after the job finishes.
# The output will be saved to a file named "stats.csv" for further analysis.
./util/job_launching/get_stats.py -N myTest-PTX | tee stats.csv

# Plot the statistics from the "stats.csv" file using the plotting utility.
# This generates visual representations of the simulation data.
./util/plotting/plot-get-stats.py -c stats.csv

# Navigate to the directory containing HTML files for plotting.
cd ./util/plotting/htmls/

# Start a local HTTP server on port 8080 to view generated HTML reports in a web browser.
# This makes it easier to analyze the data visually.
python3 -m http.server 8080


# ------------------- Accelwattch Simulations -------------------
# Run simulations for the "rodinia_2.0-ft" benchmark on the "QV100-Accelwattch_PTX_SIM" configuration.
# This configuration includes AccelWattch for energy modeling. Results will be saved under "myTest-Wattch".
./util/job_launching/run_simulations.py -B rodinia_2.0-ft -C QV100-Accelwattch_PTX_SIM -N myTest-Wattch

# Monitor the progress of the AccelWattch-enabled simulation with verbose output.
# Detailed logs will help track the simulation's performance and progress.
./util/job_launching/monitor_func_test.py -v -N myTest-Wattch

# Collect the simulation statistics for the "myTest-Wattch" simulation.
# The output will be saved to a file named "wattch-stats.csv".
./util/job_launching/get_stats.py -N myTest-Wattch | tee wattch-stats.csv

# Generate plots from the "wattch-stats.csv" file using the plotting utility.
# This produces graphical insights for the AccelWattch-enabled simulation results.
./util/plotting/plot-get-stats.py -c wattch-stats.csv

# Navigate to the directory containing HTML files for plotting.
cd ./util/plotting/htmls/

# Start a local HTTP server on port 8080 to view generated HTML reports in a web browser.
# This makes it easier to analyze the data visually.
python3 -m http.server 8080